using KUMF5H_HFT_2021221.Models;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;


namespace KUMF5H_HFT_2021221.Data
{
    class MedDbContext: DbContext
    {
        public virtual DbSet<Producer> Producers { get; set; }
        public virtual DbSet<Medicine> Medicines { get; set; }
        public virtual DbSet<Patient> Patients { get; set; }

        public MedDbContext()
        {
            // this.Database.EnsureDeleted();
            this.Database.EnsureCreated();

        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                optionsBuilder
                    .UseLazyLoadingProxies()
                    .UseSqlServer(@"Data Source=(LocalDB)\MSSQLLocalDB;AttachDbFilename=|DataDirectory|\MedDb.mdf;Integrated Security=True;MultipleActiveResultSets=True");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Medicine>(entity =>
            {
                entity
                .HasOne(medicine => medicine.Producer)                
                .WithMany(producer => producer.Medicines)                
                .HasForeignKey(medicine => medicine.ProducerID)
                .OnDelete(DeleteBehavior.ClientSetNull);
            });

            modelBuilder.Entity<Patient>(entity =>
            {
                entity
                .HasOne(patient => patient.Medicine)
                .WithMany(medicine => medicine.Patients)
                .HasForeignKey(patient => patient.MedicineID)
                .OnDelete(DeleteBehavior.ClientSetNull);
            });



            // "The primary key value needs to be specified even if it's usually generated by the database. It will be used to detect data changes between migrations"
            Producer richter = new Producer() { Id = 1, Name = "Richter" };
            Producer pfizer = new Producer() { Id = 2, Name = "Pfizer" };
            Producer beres = new Producer() { Id = 3, Name = "Béres" };


            Medicine richter1 = new Medicine() { Id = 1, ProducerID = richter.Id, BasePrice = 3000,  Name= "Zilola" };
            Medicine richter2 = new Medicine() { Id = 2, ProducerID = richter.Id, BasePrice = 3000, Name = "Daedalon" };
            Medicine richter3 = new Medicine() { Id = 3, ProducerID = richter.Id, BasePrice = 8000, Name = "Dipankrin" };
            Medicine richter4 = new Medicine() { Id = 4, ProducerID = richter.Id, BasePrice = 9000, Name = "Flamborin" };

            Medicine pfizer1 = new Medicine() { Id = 5, ProducerID = pfizer.Id, BasePrice = 10000, Name = "ACCUPRIL" };
            Medicine pfizer2 = new Medicine() { Id = 6, ProducerID = pfizer.Id, BasePrice = 15000, Name = "ELELYSO" };
            Medicine pfizer3 = new Medicine() { Id = 7, ProducerID = pfizer.Id, BasePrice = 6500, Name = "MANNITOL" };

            Medicine beres1 = new Medicine() { Id = 8, ProducerID = beres.Id, BasePrice = 6000, Name = " Actival Max" };
            Medicine beres2 = new Medicine() { Id = 9, ProducerID = beres.Id, BasePrice = 4500, Name = "Antifront" };


            Patient bence = new Patient() { Id = 1, MedicineID = richter1.Id, Illness = "Nátha" };
            Patient dani = new Patient() { Id = 2, MedicineID = pfizer1.Id, Illness = "Covid" };
            Patient krisztian = new Patient() { Id = 2, MedicineID = beres1.Id, Illness = "Izületi_fájdalom" };





            modelBuilder.Entity<Producer>().HasData(richter, pfizer, beres);
            modelBuilder.Entity<Medicine>().HasData(richter1, richter2, richter3, richter4, pfizer1, pfizer2, pfizer3, beres1, beres2);
            modelBuilder.Entity<Patient>().HasData(bence, dani, krisztian);
        }

    }
}
